scripte utf-8   " |scriptencoding| Specify the character encoding used in the script

set all&        " Reset option to its default value
set nocp " |compatible| Vim behave in a more useful way
filetype plugin indent on

set enc=utf-8   " |encoding| Encoding used internally
let &tenc=&enc  " |termencoding| Encoding used for the terminal
let &fenc=&enc  " |fileencoding| File encoding for multi-byte text
set fencs=utf-8,cp949,cp932,euc-jp,shift-jis,big5,ucs-2le,latin1
  " |fileencodings| Automatically detected character encodings
  " When Vim reads a file and 'fileencodings' starts with "ucs-bom", a check for the presence of the BOM is done and 'bomb' set accordingly.

syntax on       " Turns syntax highlighting on
set t_Co=256    " Number of colors
"colo desert256  " |colorscheme| Load color scheme
let g:seoul256_background = 233
colo seoul256
hi Search cterm=NONE ctermfg=NONE ctermbg=240
hi CursorLine cterm=NONE ctermfg=NONE ctermbg=235
hi CursorColumn cterm=NONE ctermfg=NONE ctermbg=235

" Check :help |option-list|
set lpl         " |loadplugins| Load plugin scripts when starting up
set ff=mac      " |fileformat| File format used for file I/O
set ffs=unix,dos,mac
                " |fileformats| Automatically detected values for 'fileformat'
set nobk        " |backup| Keep backup file after overwriting a file
"set bex=.bkup  " |backupext| Extension used for the backup file
set noswf       " |swapfile| Use a swapfile for the buffer
set noeol       " |endofline| Write <EOL> for last line in file
set hi=50       " |history| Number of command-lines that are remembered

set tw=80       " |textwidth| Maximum width of text that is being inserted
set wmh=0       " |winminheight| Minimum number of lines for any window
set lsp=0       " |linespace| Number of pixel lines to use between characters
set ru          " |ruler| Show cursor line and column in the status line
set sc          " |showcmd| Show (partial) command in status line
set ls=2        " |laststatus| Tells when last window has status lines
set nu          " |number| Print the line number in front of each line
set nuw=4       " |numberwidth| Number of columns used for the line number

set et          " |expandtab| Use spaces when <Tab> is inserted
set ts=2        " |tabstop| Number of spaces that <Tab> in file uses
set sw=2        " |shiftwidth| Number of spaces to use for (auto)indent step
"set sts=4       " |softtabstop| Number of spaces that <Tab> uses while editing
set sta         " |smarttab| Use 'shiftwidth' when inserting <Tab>
set ai          " |autoindent| Take indent for new line from previous line
set ci          " |copyindent| Make 'autoindent' use existing indent structure
set nosi        " |smartindent| Smart autoindenting for C programs
set fo=croq     " |formatoptions| How automatic formatting is to be done

set nf+=alpha   " |nrformats| Number formats recognized for CTRL-A command

set nowrap      " |wrap| Long lines wrap and continue on the next line
set lbr         " |linebreak| Wrap long lines at a blank
set ss=5        " |sidescroll| Minimum number of columns to scroll horizontal

set magic       " |magic| Special characters in search patterns
set sm          " |showmatch| Briefly jump to matching bracket if insert one
set ws          " |wrapscan| Searches wrap around the end of the file
set is          " |incsearch| Highlight match while typing search pattern
set nohls       " |hlsearch| Highlight matches with last search pattern
set ic          " |ignorecase| Ignore case in search patterns
set scs         " |smartcase| No ignore case when pattern has uppercase
set inf         " |infercase| Adjust case of match for keyword completion

set bs=indent,eol,start
                " |backspace| how backspace works at start of line
set sol         " |startofline| Commands move cursor to first blank in line
set sel=exclusive
                " |selection| What type of selection to use

"set fdc=6      " |foldcolumn| Width of the column used to indicate folds
"set fdm=indent " |foldmethod| Folding type
"set fdl=99     " |foldlevel| Close folds with a level higher than this
set fen         " |foldenable| Set to display all folds open

set lcs=tab:>-,trail:-,precedes:<,extends:>,nbsp:.
                " |listchars| Characters for displaying in list mode
set mps+=<:>    " |matchpairs| Pairs of characters that "%" can match

set noto ttimeout " |timeout| time out on key codes
" set tm=3000 ttm=100 " |timeoutlen| The time in milliseconds that is waited for a key code or mapped key sequence to complete

set wmnu        " |wildmenu| command-line completion operates in an enhanced mode
set wig+=*/tmp/*,*.so,*.swp,*.zip
                " |wildignore| A file that matches with one of these patterns is ignored when expanding wildcards

set lz          " |lazyredraw| Don't redraw while executing macros

set nospell     " |spell| When on spell checking will be done.
set report=0    " |report| Threshold for reporting number of lines changed
"set km=startsel,stopsel " |keymodel| enable special things that keys can do
set bri         " |breakindent| Every wrapped line will continue visually indented

set cursorline
set cursorcolumn

let g:html_use_css = 1    " the ':%TOhtml' command generates html without <font> tags

" au BufRead,BufNewFile *.dic setlocal ft=php
" au FileType javascript,jsp setlocal cin
au BufReadPost *.njk set syntax=html

au FileType javascript setlocal include=import
au FileType javascript setlocal suffixesadd=.js
au FileType javascript setlocal includeexpr=substitute(v:fname,'^/\\(.*\\)$','\\1/index.js','')
"au FileType javascript setlocal includeexpr=substitute(v:fname,'$','/index.js','')

augroup every
  " autocmd!
  au InsertEnter * set nornu
  au InsertLeave * set rnu
                " |relativenumber| Show the line number relative to the line with the cursor
augroup END

map <leader>n :set nu! rnu!<CR>
map <leader>w :set wrap!<cr>
map <leader>l :set list!<cr>
map <leader>p :set paste!<CR>
map <leader>s :set spell!<CR>
map <leader>t :set et!<CR>

map <MiddleMouse> <Nop>
map! <MiddleMouse> <Nop>
map <ScrollWheelUp> <Nop>
map <ScrollWheelDown> <Nop>

" inoremap <C-v> <C-r>"
" inoremap <Tab> <C-P>
inoremap jk <Esc>

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()

" Using <Tab> to indent/unindent while in visual mode
vmap <Tab> >gv
vmap <S-Tab> <gv

" Macro Setting
ia xdate <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>
ia xtime <C-R>=strftime("%H:%M:%S")<CR>

" runtime macros/matchit.vim
packadd! matchit
au FileType javascript let b:match_ignorecase = 1
au FileType javascript let b:match_words = '<:>,' .
  \ '<\@<=[ou]l\>[^>]*\%(>\|$\):<\@<=li\>:<\@<=/[ou]l>,' .
  \ '<\@<=dl\>[^>]*\%(>\|$\):<\@<=d[td]\>:<\@<=/dl>,' .
  \ '<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>'

" Explorer Setting
let g:netrw_preview = 1 " preview window shown in a vertically split window
let g:netrw_browse_split = 0 " re-using the same window
"let g:explVertical=1
"let g:explSplitRight=1
"let g:explStartRight=1
"let g:explWinSize=20

let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'gitbranch', 'readonly', 'filename', 'modified' ]
  \   ],
  \   'right': [
  \     [ 'lineinfo' ],
  \     [ 'percent' ],
  \     [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ]
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ }
\ }

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|node_modules|babel_cache)$',
  \ 'file': '\v\.(exe|so|dll|png|gif|jpg)$',
  \ }

let g:vimwiki_list = [
  \{
  \   'path': '~/Documents/vimwiki',
  \   'syntax': 'markdown',
  \   'ext' : '.md',
  \   'diary_rel_path': '.',
  \},
\]
let g:vimwiki_dir_link = 'index'
noremap glt :VimwikiToggleListItem<CR>

let g:user_emmet_settings = {
\  'javascript' : {
\      'extends': 'jsx',
\  },
\}

if filereadable($MYVIMRC . ".local")
  source `=$MYVIMRC . ".local"`
endif
runtime! vimrc.d/*.vim

